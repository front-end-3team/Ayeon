Deep Dive 제 07장 : 연산자

7.1 산술 연산자
    - 산술 연산자 arithmetic operator 는 피연산자를 대상으로 수학적 계싼을 수행해 숫자 값을 만듦
    - 산술 연산이 불가능할 경우 NaN을 반환

    7.1.1 이항 산술 연산자
        + 덧셈 / - 뺄셈 / * 곱셈 / '/' 나눗셈 / % 나머지

    7.1.2 단항 산술 연산자
        ++ 증가 / -- 감소 / + 음수를 양수로 반전하지 않고 아무런 효과도 없다 / - 양수를 음수로, 음수를 양수로 반전한 값 반환

        - 증가 및 감소 연산자는 위치에 의미가 있음
        x++ 선할당 후증가 / ++x 선증가 후할당 / x-- 선할당 후감소 / --x 선감소 후할당

    7.1.3 문자열 연결 연산자
        - + 연산자는 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작
            => 암묵적 타입 변환 implicit coercion 또는 타입 강제 변환 type coercion

7.2 할당 연산자

            예제        동일 표현
    =       x = 5       x = 5
    +=      x += 5      x = x + 5
    -=      x -= 5      x = x - 5
    *=      x *= 5      x = x * 5
    /=      x /= 5      x = x / 5
    %=      x %= 5      x = x % 5

    - 할당문은 값으로 평가되는 표현식인 문으로서 할당된 값으로 평가

7.3 비교 연산자

    7.3.1 동등/일치 비교 연산자

            의미            예제        설명
    ==      동등 비교       x == y      x와 y의 값이 같음
    ===     일치 비교       x === y     x와 y의 값과 타입이 같음
    !=      부동등 비교     x != y      x와 y의 값이 다름
    !==     불일치 비교     x !== y     x와 y의 값과 타입이 다름

    - 동등 비교(==) 연산자는 좌우의 피연산자를 비교할 때 먼저 암묵적 타입 변환을 통해 타입을 일치시킨 후 같은 값인지 비교
        => 편리한 경우도 있으나 결과를 예측하기 어렵고 실수하기 쉬움 => 때문에 사용하지 않는 편이 좋다

    - 일치 비교(===) 연산자는 좌우의 피연산자가 타입도 같고 값도 같은 경우에만 true를 반환
        => NaN === NaN -> false 자신과 일치하지 않는 유일한 값
    
    7.3.2
            예제        설명
    >       x > y       x가 y보다 크다
    <       x < y       x가 y보다 작다
    >=      x >= y      x가 y보다 크거나 같다
    <=      x <= y      x가 y보다 작거나 같다

7.4 삼항 조건 연산자
    - 삼항 조건 연산자 ternary operator는 조건식의 평가 결과에 따라 반환할 값을 결정

    ** 조건식 ? 조건식이 true일 때 반환할 값 : 조건식이 false일 때 반환할 값

    ex) (score >= 60) === false
        let result = score >= 60 ? 'pass' : 'fail';
        (score >= 60) === true

    - 삼항 조건 연산자 표현식은 값으로 평가할 수 있는 표현식인 문 => if문은 표현식이 아닌 문이기에 값처럼 사용 불가
    - 조건에 따라 수행해야 할 문이 하나가 아니라 여러개면 if...else문의 가독성이 더 좋다