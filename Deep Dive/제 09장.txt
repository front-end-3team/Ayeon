Deep Dive 제 09장 : 타입 변환과 단축 평가

9.1 타입 변환이란?
    
    ** 명시적 타입 변환 explicit coercion 이란?
        - 개발자가 의도적으로 값의 타입을 변환하는 것
        - 다른 말로는 타입 캐스팅 type casting
        - 개발자의 의자가 코드에 명백하게 드러난다

        ex) let x = 10;

            // 명시적 타입 변환
            // 숫자를 문자열로 타입 캐스팅
            let str = x.toString();
            console.log(typeof str, str) // string 10

            console.log(typeof x, x) // number 10
    
    ** 압묵적 타입 변환 implicit coercion 이란?
        - 개발자의 의도와는 상관없이 표현식을 평가하는 도중 js 엔진에 의해 암묵적으로 타입이 변환되는 것
        - 타입 강제 변환 type coercion 이라고도 한다

        ex) let x = 10;

            // 암묵적 타입 변환
            // 문자열 연결 연산자는 숫자 타입 x의 값을 바탕으로 새로운 문자열을 생성
            let str = x + '';
            console.log(typeof str, str) // string 10

            // x 변수의 값이 변경된 것은 아님
            console.log(typeof x, x) // number 10

9.2 암묵적 타입 면환

    9.2.1 문자열 타입으로 변환

        ex) 1 + '2' // "12"
            ` 1 + 1 = ${1 + 1}` // -> "1 + 1 = 2"

    9.2.2 숫자 타입으로 변환

        ex) 1 - '1' // 0
            1 * 10 // 10
            1 / 'one' // NaN
            '1' > 0 // true
    
    9.2.3 불리언 타입으로 변환

        ex) if('') console.log(x);

        - js 엔진은 조건식의 평가 결과를 불리언 타입으로 암묵적 타입 변환함
        - js 엔진은 불리언 타입이 아닌 값을 Truthy 값(참으로 평가되는 값) 혹은 Falsy(거짓으로 평가되는 값)으로 구분

9.3 명시적 타입 변환

    9.3.1 문자열 타입으로 변환
        
        ** 문자열 타입이 아닌 값을 문자열 타입으로 변환하는 방법
            1. String 생성자 함수를 new 연산자 없이 호출
            2. Object.prototype.toString 메서드 사용
            3. 문자열 연결 연산자 이용

            ex) 1. String(1); // "1"
                   String(NaN); // "NaN"

                2. (1).toString(); // "1"
                   (NaN).toString(); // "NaN"
                
                3. 1 + ''; // "1"
                   NaN + ''; // "NaN"

    9.3.2 숫자 타입으로 변환

        ** 숫자 타입이 아닌 값을 숫자 타입으로 변환하는 방법
            1. Number 생성자 함수를 new 연산자 없이 호출
            2. parseInt, parseFloat 함수 사용
            3. + 단항 산술 연산자 이용
            4. * 산술 연산자 이용

            ex) 1. Number('0') // 0
                   Number('-1') // -1

                2. parseInt('0') // 0
                   parseInt('-1') // -1
                   parseFloat('10.53') // 10.53

                3. +'0'; // 0
                   +'-1'; // -1

                4. '0' * 1; // 0
                   '-1' * 1; // -1

    9.3.3 불리언 타입으로 변환

        ** 숫자 타입이 아닌 값을 숫자 타입으로 변환하는 방법
            1. Boolean 생성자 함수를 new 연산자 없이 호출
            2. ! 부정 논리 연산자를 두 번 사용

            ex) 1. Boolean('x') // true
                   Boolean('') // false

                2. !!'x'; // true
                   !!''; // false
                   !!'false'; // true

9.4 단축 평가

    9.4.1 논리 연산자를 사용한 단축 평가
        - 논리 연산의 결과를 결정하는 피연산자를 타입 변환하지 않고 그대로 반환하는 것을 단축 평가 short-circuit evaluation

        단축 평가 표현식        평가 결과
        true || anything        true
        false || anything       anything
        true && anything        anything
        false && anything       false