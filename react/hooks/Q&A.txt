Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - Component 사용
    - Virtual Dom 사용
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 컴포넌트를 사용한 재사용이 가능하고 유지보수가 용이하며, 코드 가독성을 높일 수 있음


Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 실제 돔을 사용했을 경우, 작은 변경에도 처음부터 다 렌더링이 된다. 가상돔을 사용하면 불필요한 렌더링 횟수를 줄일 수 있음
    - 메모리 낭비가 덜하기 때문에


Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 리렌더링


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 필요한 부분만 리렌더링이 가능해지면서 속도가 빨라지고 비용적인 측면에서도 이득.


Q6. (Q3)은 리액트에서 어느 순간에 실현될까요?
    - 데이터가 변했을 때, 즉 스테이트가 변경될 때마다 리렌더링되면서 실현된다


Q7. 훅 함수는 왜 만들게 되었을까요?
    - 상태값(state)에 접근하고, 생명주기 기능(lifecycle features)을 사용하기 위해 class형 컴포넌트 선언을 해줘야 했으나
      Hook 이 등장하면서 함수형 컴포넌트에서도 위의 기능들을 사용할 수 있게 됨

    아래의 훅 함수는 각 언제 선언되어야 할까요?

    (1) useState
         - state, 상태를 관리할 때 사용
         - 렌더링 함수를 다시 실행해야 할 때 = UI를 변경하였을 때

    (2) useRef
         - 특정 태그를 선택할 때, 실제 돔에 접근하기 위해 사용하는 함수, 엘리먼트의 크기를 가져오거나, 포커스를 설정해줘야 할 때.
         - 

    (3) useEffect - 컴포넌트가 처음 마운트되거나 리렌더링 될 때, 선언된 변수의 값이 변경될 때 실행할 구문들을 정의해놓은 함수
		  - 마운트 됐을 때(처음 나타났을 때), 업데이트, 언마운트 됐을 때
    (4) useCallback - 특정 함수를 새로 만들지 않고 재사용하고 싶을 때 사용
    (5) useMemo - 특정 값을 재사용할 때 사용
		- 첫 렌더링 때 실행되고 리렌더링이 될 때마다 캐시된 데이터를 반환해 보여줌


Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 반복되는 로직을 하나로 묶어 재사용할 수 있음. 변경사항이 있을 시 커스텀 훅에서만 변경하면 돼서 수정하기도 효율적임
    - 유저의 input을 관리할 때 혹은 Fetch를 요청할 때 사용


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 렌더링 최적화
    - 코드의 재사용
    - 


Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    -
    -
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     -
     -
